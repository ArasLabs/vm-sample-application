<AML>
 <Item type="Method" id="24395DAD07BE44588BEFFC1E0AB6F620" action="add">
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[ValidateScopeForm = function() {
	this.Node = parent.dialogArguments.validationResult;
	this.aras = parent.aras;
	this.InitializeData();
};

ValidateScopeForm.prototype.InitializeData = function() {
	require(['Modules/aras.innovator.VariantManagementSample/Scripts/tableRuleEditor/dataModel/expressionModelItem'], function(ExpressionModel) {
		var container = document.getElementById('gridValidation');
		/*Clear Container*/
		while (container.firstChild) {
			container.removeChild(container.firstChild);
		}
		/*Clear Container*/
		// display result
		if (this.Node) {
			var gridItems = [];
			var ValidationList = this.Node.dom.selectNodes('//Validation');
			var lineIndex = 0;
			for (var i = 0; i < ValidationList.length; i++) {
				var validationLine = ValidationList[i];
				newGridItem = {
					uniqueId: lineIndex++,
					type: validationLine.getAttribute('type'),
					result: validationLine.getAttribute('result'),
					message: ''
				};
				var errorLine = validationLine.selectSingleNode('Error');
				var lineAdded = false;
				if (errorLine !== null) {
					var errorName = errorLine.selectSingleNode('Name');
					if (errorName !== null) {
						newGridItem.message = errorName.text;
						gridItems.push(newGridItem);
						lineAdded = true;
					}
					var errorMessage = errorLine.selectSingleNode('Message');
					if (errorMessage !== null) {
						gridItems.push({
							uniqueId: lineIndex++,
							type: '',
							result: '',
							message: errorMessage.text
						});
					}
					var errorDetails = errorLine.selectSingleNode('details');
					if (errorDetails !== null) {
						for (var detailsIndex = 0; detailsIndex < errorDetails.childNodes.length; detailsIndex++) {
							var expression = '<expression>' + errorDetails.childNodes[detailsIndex].xml + '</expression>';
							var detailsItem = aras.newIOMItem();
							detailsItem.setProperty('definition', expression);
							var expressionItem = ExpressionModel({
								aras: aras,
								itemData: {
									node: detailsItem.node
								}
							});
							detailsItem.loadAML(expression);
							gridItems.push({
								uniqueId: lineIndex++,
								type: '',
								result: '',
								message: expressionItem.deserializeExpressionToString({optionDeserializer: this.expressionPropositionFormDeserializer.bind(detailsItem)})
							});
						}
					}
				}
				if (!lineAdded) {
					gridItems.push(newGridItem);
				}
			}

			clientControlsFactory.createControl('Aras.Client.Controls.Public.GridContainer',
				{
					aras: aras,
					connectId: 'gridValidation',
					canEdit_Experimental: function() { return false; }
				}, function(control) {
					var gridWidget = control.grid_Experimental;
					var mockFunction = function() {};
					gridWidget.setSortIndex = mockFunction;
					gridWidget.getSortProps = mockFunction;

					control.setLayout_Experimental([
						{field: 'type', name: 'Type', width: '100px'},
						{field: 'result', name: 'Result', width: '50px'},
						{field: 'message', name: 'Message', width: '100%'}
					]);
					control.setArrayData_Experimental(gridItems);
				});
		}
	}.bind(this));
};
ValidateScopeForm.prototype.expressionPropositionFormDeserializer = function(variableId, namedConstantId) {
	var family = this.dom.selectSingleNode('expression/EQ/variable[@id="' + variableId + '"]/@name');
	var option = this.dom.selectSingleNode('expression/EQ/named-constant[@id="' + namedConstantId + '"]/@name');
	return (family ? family.text : '') + ' = ' + (option ? option.text : '');
};
ValidateScopeForm = new ValidateScopeForm();]]></method_code>
  <method_type>JavaScript</method_type>
  <name>vm_onShowValidateScope</name>
 </Item>
</AML>
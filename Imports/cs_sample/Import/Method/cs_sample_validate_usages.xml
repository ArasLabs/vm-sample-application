<AML>
 <Item type="Method" id="8EFA8D45B5134EFDB9FE3154505C0150" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//MethodTemplateName=CSharpInOut;
			Aras.Server.Core.IOMConnection tmpConnection = (Aras.Server.Core.IOMConnection)InnovatorServerASP;
			CCO = tmpConnection.CCO;
			inn = new Innovator(InnovatorServerASP);
			Item = inn.getItemInDom(inDom);

			DataReader dataReader = new DataReader(inn, Item);
			foreach (string errorItem in ValidateGenericItemList(dataReader.GetUsages()))
				if (errorItem != null)
				{
					XmlDocument tmpDoc = new XmlDocument();
					tmpDoc.LoadXml(errorItem);
					XmlNode impNode = outDom.ImportNode(tmpDoc.DocumentElement, true);
					outDom.SelectSingleNode("//Result").AppendChild(impNode);
				}
		}
		private Innovator inn { get; set; }
		private Item Item { get; set; }
		Aras.Server.Core.CallContext CCO { get; set; }
		private enum errorType
		{
			missingUsage,
			overlapUsage,
		}
		private System.Collections.Generic.IEnumerable<string> ValidateGenericItemList(Item usagesList)
		{
			System.Collections.Generic.List<string> errorList = new System.Collections.Generic.List<string>();
			for (int i = 0; i < usagesList.getItemCount(); i++)
			{
				Item errorItem = ValidateMissingUsage(usagesList.getItemByIndex(i));
				if (errorItem != null)
					errorList.Add(string.Format("<error type=\"{1}\">{0}</error>", errorItem.node.OuterXml, errorType.missingUsage));
				errorItem = ValidateOverlapUsage(usagesList.getItemByIndex(i));
				if (errorItem != null)
					for (int overIndex = 0; overIndex < errorItem.getItemCount(); overIndex++)
					{
						errorList.Add(string.Format("<error type=\"{1}\">{0}</error>", errorItem.getItemByIndex(overIndex).node.OuterXml, errorType.overlapUsage));
					}
			}
			return errorList;
		}
		private Item ValidateMissingUsage(Item genericItem)
		{
			Item csSampleGenericItemStructure = genericItem.getRelationships("cs_sample_GenericItemStructure");
			if (csSampleGenericItemStructure.getItemCount() > 0)
			{
				return null; 
			}

			Item csSampleUsageList = genericItem.getRelationships("cs_sample_Usage");
			int usageCount = csSampleUsageList.getItemCount();
			if (usageCount == 0)
			{
				return genericItem; 
			}
			var targetScope = inn.newItem("Method", "cs_sample_ScopeBuilder");
			targetScope.setID(Item.getID());

			Item validationMethod = inn.newItem("Method", "cfg_GetValidCombinations");
			validationMethod.setAttribute("responseFormat", "XML");
			validationMethod.setAttribute("fetch", "1");
			validationMethod.setPropertyItem("targetScope", targetScope);

			System.Collections.Generic.List<string> usageList = new System.Collections.Generic.List<string>();

			for (int i = 0; i < usageCount; i++)
			{
				Item usage = csSampleUsageList.getItemByIndex(i);
				string definition = usage.getProperty("definition");
				XmlNode expressionContent = GetExpressionFromText(inn.newXMLDocument(), definition);
				if (expressionContent == null || string.IsNullOrEmpty(expressionContent.InnerXml))
				{
					usageList.Clear();
					break;
				}
				usageList.Add(string.Format("<and>{0}</and>", expressionContent.InnerXml));
			}
			bool fixedUsageExists = usageList.Count == 0;
			if (!fixedUsageExists)
			{
				validationMethod.setProperty("condition", string.Format("<expression><not><or>{0}</or></not></expression>", string.Join("", usageList)));
			}
			Item result = validationMethod.apply();
			return BuidValidateMissingUsageResult(genericItem, result, fixedUsageExists);
		}
		internal static XmlNode GetExpressionFromText(XmlDocument xmlDoc, string text)
		{
			if (string.IsNullOrEmpty(text))
			{
				return null;
			}
			xmlDoc.PreserveWhitespace = false;
			xmlDoc.LoadXml(text);
			return xmlDoc.SelectSingleNode("expression");
		}
		private Item ValidateOverlapUsage(Item genericItem)
		{
			var targetScope = inn.newItem("Method", "cs_sample_ScopeBuilder");
			targetScope.setID(Item.getID());

			Item validationMethod = inn.newItem("Method", "cfg_GetIntersectingExpressions");
			validationMethod.setAttribute("responseFormat", "XML");
			validationMethod.setAttribute("fetch", "1");
			validationMethod.setPropertyItem("targetScope", targetScope);

			Item csSampleUsageList = genericItem.getRelationships("cs_sample_Usage");
			int usagesCount = csSampleUsageList.getItemCount(); 
			if (usagesCount < 2)
			{
				return null;
			}

			System.Collections.Generic.HashSet<int> fixedUsageIndexes = new System.Collections.Generic.HashSet<int>();
			System.Collections.Generic.List<XmlNode> fixedUsageOverlappings = new System.Collections.Generic.List<XmlNode>();

			var cartesianItemDom = validationMethod.dom;
			var cartesianNode = cartesianItemDom.CreateElement("cartesian-square");
			var selectedValueSet = cartesianNode.OwnerDocument.CreateElement("set");
			for (int i = 0; i < usagesCount; i++)
			{
				Item usage = csSampleUsageList.getItemByIndex(i);
				string definition = usage.getProperty("definition");
				XmlNode expressionNode = GetExpressionFromText(inn.newXMLDocument(), definition);
				string expressionContent = expressionNode == null ? string.Empty : expressionNode.InnerXml;

				// There is the known issue IR-056769, when "cfg_GetIntersectingExpressions" method returns
				// error when processing fixed (empty) expression.
				// Skip fixed expression from request and process them manually
				if (!string.IsNullOrEmpty(expressionContent))
				{
					AddExpressionData(cartesianNode, string.Format("<![CDATA[<expression>{0}</expression>]]]]><![CDATA[>", expressionContent), usage.getID());
				}
				else
				{
					fixedUsageIndexes.Add(i);
					for (int j = 0; j < usagesCount; j++)
					{
						// if there are two fixed expressions A and B there is a need to skip A-A and B-B overlappings,
						// and B-A overlapping, when A-B was already found
						if (fixedUsageIndexes.Contains(j))
						{
							continue;
						}
						XmlElement cortegeNode = cartesianItemDom.CreateElement("cortege");
						Item overlappedUsage = csSampleUsageList.getItemByIndex(j);
						AddExpressionData(cortegeNode, "", usage.getID());
						AddExpressionData(cortegeNode, "", overlappedUsage.getID());
						fixedUsageOverlappings.Add(cortegeNode);
					}
				}
			}
			cartesianItemDom.DocumentElement.AppendChild(cartesianNode);

			Item overlappedExpressions = null;
			if (usagesCount - fixedUsageIndexes.Count > 1)
			{
				overlappedExpressions = validationMethod.apply();
			}
			else
			{
				overlappedExpressions = inn.newResult("");
			}

			XmlNode result = overlappedExpressions.dom.SelectSingleNode(Item.XPathResult);
			if (result != null)
			{
				foreach (XmlNode overlappingNode in fixedUsageOverlappings)
				{
					XmlNode importedFixedOverlappingNode = overlappedExpressions.dom.ImportNode(overlappingNode, true);
					result.AppendChild(importedFixedOverlappingNode);
				}
			}
			return BuidValidateOverlapUsageResult(genericItem, overlappedExpressions);
		}
		private void AddExpressionData(XmlElement selectedValueSet, string value, string id)
		{
			var selectedValueExpression = selectedValueSet.OwnerDocument.CreateElement("expression");
			selectedValueExpression.SetAttribute("id", id);
			selectedValueExpression.InnerXml = value;
			selectedValueSet.AppendChild(selectedValueExpression);
		}
		private Item BuidValidateMissingUsageResult(Item genericItem, Item result, bool missingUsageExists)
		{
			XmlNodeList cortegeList = result.dom.SelectNodes("//combination");
			if (cortegeList.Count > 0 && !missingUsageExists)
			{
				Item resultItem = inn.newItem(genericItem.getType());
				resultItem.removeAttribute("isNew");
				resultItem.removeAttribute("isTemp");
				resultItem.setID(genericItem.getID());
				return resultItem;
			}
			return null;
		}
		private Item BuidValidateOverlapUsageResult(Item genericItem, Item result)
		{
			Item errorItem = null;
			XmlNodeList cortegeList = result.dom.SelectNodes("//cortege");
			foreach (XmlNode cortege in cortegeList)
			{
				Item resultItem = inn.newItem(genericItem.getType());
				resultItem.removeAttribute("isNew");
				resultItem.removeAttribute("isTemp");
				resultItem.setID(genericItem.getID());
				resultItem.node.AppendChild(resultItem.dom.ImportNode(cortege, true));
				if (errorItem == null)
					errorItem = resultItem;
				else
					errorItem.appendItem(resultItem);
			}
			return errorItem;
		}
		internal class DataReader
		{
			internal DataReader(Innovator inn, Item item)
			{
				this.inn = inn;
				this.Item = item;
			}
			private Innovator inn { get; set; }
			private Item Item { get; set; }
			internal Item GetUsages()
			{
				System.Collections.Generic.IEnumerable<string> ids = GetGenericItemIdList();
				Item genericItemStructure = inn.newItem("cs_sample_GenericItem", "get");
				genericItemStructure.setAttribute("idlist", string.Join(",", ids));
				genericItemStructure.setAttribute("select", "name");

				Item usage = inn.newItem("cs_sample_Usage");
				usage.setAttribute("select", "name, definition");
				genericItemStructure.addRelationship(usage);
				
				Item structure = inn.newItem("cs_sample_GenericItemStructure");
				structure.setAttribute("select", "id,source_id");
				genericItemStructure.addRelationship(structure);

				return genericItemStructure.apply();
			}
			internal System.Collections.Generic.IEnumerable<string> GetGenericItemIdList()
			{
				Item genericItemStructure = inn.newItem("cs_sample_GenericItemStructure");
				genericItemStructure.setAttribute("select", "related_id");
				genericItemStructure.setAttribute("repeatProp", "related_id");
				genericItemStructure.setAttribute("repeatTimes", "0");
				genericItemStructure.setPropertyItem("related_id", inn.newItem("cs_sample_GenericItem"));

				Item rootGenericItem = inn.newItem("cs_sample_GenericItem", "GetItemRepeatConfig");
				rootGenericItem.setID(Item.getID());
				rootGenericItem.setAttribute("select", "id");
				rootGenericItem.addRelationship(genericItemStructure);
				rootGenericItem = rootGenericItem.apply();

				System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
				Item genericItemList = rootGenericItem.getItemsByXPath("//Item[@type='cs_sample_GenericItem']");
				for (var idx = 0; idx < genericItemList.getItemCount(); idx++)
				{
					Item loopGenericItem = genericItemList.getItemByIndex(idx);
					list.Add(loopGenericItem.getID());
				}
				return list;
			}]]></method_code>
  <method_type>C#</method_type>
  <name>cs_sample_validate_usages</name>
</Item>
</AML>
<AML>
  <Item type="Method" id="DC9AD155DE3B4D8EBB14733ECB778AB2" action="add">
    <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
    <method_code>
      <![CDATA[       
// Client side Method: Base version TreeGrid with base Action
BaseTreeGrid = function () {
}

BaseTreeGrid.prototype = {
	grid: null,
	toolbar: null,
	ready: false,

	controlToolbarOnClick: function(item) {
		this.grid.turnEditOff();
		var id = item.getId();
		this.onToolbarClick({id: id});
	},

	controlGridClick: function(rowId, column) {
		this.onGridClick({rowId: rowId, column: column});
	},
	
	controlGridDoubleClick: function(rowId) {
		this.onGridDoubleClick({rowId: rowId});
	},
	
	controlGridLinkClick: function(strLink) {
		this.onGridLinkClick({linkData: strLink});
	},
	
	controlGridMenuInit: function(rowId, col, p) {
		var menu = this.grid.getMenu();
		if (menu.getItemCount() > 0) {
			menu.removeAll();
		}
		var menuItems = [];
		this.controlGridMenuClickHandler = function (menuChoice) {}; // reset previous handler;
		var menuInit = this.onGridMenuInit({rowId: rowId, column: col, menuItems: menuItems});
		if (menuInit) {
			for (var i = 0; i < menuItems.length; i++) {
				if (menuItems[i].separator) {
					menu.addSeparator();
				} else {
					menu.add(i.toString(), (menuItems[i].label || ""), { disable: !menuItems[i].enabled });
				}
			}
			
			//set new handler which lock in clouser menuItems
			this.controlGridMenuClickHandler = function (menuChoice) {
				var selectedId = this.grid.getSelectedId();
				if (selectedId) {
					var menuItem = menuItems[parseInt(menuChoice, 10)];
					this.onGridMenuClick({menu: menuItem});
				}
				return;
			};
			
			return true;
		}
		
		return false;
	},
	controlGridMenuClick: function (menuChoice) {
		if(this.controlGridMenuClickHandler){
				this.controlGridMenuClickHandler(menuChoice);
		}
		//will be overridden in controlGridMenuInit;
	},
	
	controlGridKeyPress: function(key) {
		this.onGridKeyPress({key: key});
	},

	onToolbarClick: function (eArg) {
		return;
	},

	onGridClick: function (eArg) {
		return;
	},

	onGridDoubleClick: function (eArg) {
		return;
	},

	onGridLinkClick: function (eArg) {
		return;
	},

	onGridMenuInit: function (eArg) {
		var mnu = this.getMenu();
			mnu.removeAll();
			mnu.add("view_item","View Item");
			mnu.menu.startup();
	},

	onGridMenuClick: function (eArg) {
		eArg.menu.handler.execute ? eArg.menu.handler.execute() : eArg.menu.handler();
		return;
	},

	onBeginEditCell: function (eArg) {
		return false;
	},

	onEndEditCell: function  (eArg) {
		return false;
	},
	
	onGridKeyPress: function (eArg) {
		return true;
	},

	initialize: function () {
		//load grid and toolbar was success
	},

	loadHTML: function (instanceName) {
		var htmlText =	'<table id="mainTable" style="overflow:hidden; width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;" cellspacing="0" cellpadding="0">' +
					        '<tr style="vertical-align: top;">' +
						        '<td id="gridTD" style="height: 100%;"></td>' +
			                    '<iframe id="dimmer_spinner" src="../scripts/Spinner.html" style="top: 0px; width: 100%; height: 100%; position: absolute; z-index: 100; background: white; opacity: 0.7;"></iframe>' +
			                '</tr>' +
				        '</table>';
				
		var docElement = document.documentElement,
    		mainDiv = document.createElement('div'),
    		mainTable,
    		//toolbar,
    		grid;
		mainDiv.innerHTML = htmlText;
		document.body.appendChild(mainDiv);
		mainTable = document.getElementById('mainTable');

		if (top.aras.Browser.isIe() && top.aras.Browser.getMajorVersionNumber() < 11)  {
			top.aras.browserHelper.adjustGridSize(window, function () {
				mainTable.style.height = (docElement.clientHeight - 30) + 'px';
			}, false);
		}

		var self = this;
		/*clientControlsFactory.createControl("Aras.Client.Controls.Public.Toolbar", { connectId: "toolbar_td" }, function (control) {
			toolbar = control;
			clientControlsFactory.on(toolbar, { "onClick": self.controlToolbarOnClick.bind(self) });
		});
		this.toolbar = toolbar;*/
	
		clientControlsFactory.createControl("Aras.Client.Controls.Public.TreeGridContainer", {
			canEdit_Experimental: dojo.hitch(this, function (rowId, field) {
				var columnIndex = self.grid.columns_Experimental.get(field, 'index');
				return self.onBeginEditCell({ rowId: rowId, column: columnIndex });
			})
		}, function (control) {
			grid = control;
			clientControlsFactory.on(grid, {
				"gridClick": self.controlGridClick.bind(self),
				"gridDoubleClick": self.controlGridDoubleClick.bind(self),
				"gridLinkClick": self.controlGridLinkClick.bind(self),
				"gridMenuInit": self.controlGridMenuInit.bind(self),
				"gridMenuClick": self.controlGridMenuClick.bind(self),
				"onApplyEdit_Experimental": function (rowId, field, value) {
					var columnIndex = self.grid.columns_Experimental.get(field, 'index');
					return self.onEndEditCell({ rowId: rowId, column: columnIndex });
				},
				"gridKeyPress": self.controlGridKeyPress.bind(self)
			});
		});
		this.grid = grid;
		this.initialize();
		this.ready = true;
	},

	getColumnLabelByName: function (typeName, propName) {
		var itemType = top.aras.getItemTypeForClient(typeName, "name");
		var propItem = itemType.getItemsByXPath("Relationships/Item[@type='Property' and name='" + propName + "']").node;
		return top.aras.getItemProperty(propItem, 'label');
	},

	setToolbarItemEnable: function (ctrlName, bool) {
		var toolbar = this.toolbar.getActiveToolbar();
		bool = (bool === undefined) ? true : !!bool;
		try {
			var tbi = toolbar.getElement(ctrlName);
			if (tbi) {
				tbi.setEnabled(bool);
			}
		} catch (excep) {
			alert('exception during setToolbarItemEnable()');
		}
	},

	getProperty: function (node, element) {
		//this function is used instead of top.aras.getItemProperty because of performance reasons
		var value = "";
		if (node) {
			var tempNode = node.selectSingleNode(element);
			if (tempNode) {
				value = tempNode.text;
			}
		}
		return value;
	},

	expandAll: function (bool) {
		this.grid.setPaintEnabled(false);
		if (bool) {
			this.grid.expandAll();
		} else {
			this.grid.collapseAll();
		}
		this.grid.setPaintEnabled(true);
	},

	setLink: function (row_id, row_type, item_id, col) {
		this.grid.SetCellTextColor(row_id, col, "#3668B1");
		this.grid.SetCellLink(row_id, col, "'" + row_type + "','" + item_id + "'");
	},
	
	GetGridState: function () {
		return {
			expanded: this.grid.getOpenedItems(";").split(";"),
			selected: this.grid.getSelectedItemIDs(";").split(";")
		};
	},

	SetGridState: function (gridState) {
		var l = gridState.expanded.length;
		for (var i = 0; i < l; i++) {
			if (gridState.expanded[i]) {
				this.grid.openItem(gridState.expanded[i]);
			}
		}

		l = gridState.selected.length;
		for (var i = 0; i < l; i++) {
			if (gridState.selected[i]) {
				this.grid.setSelectedRow(gridState.selected[i], true, true);
			}
		}
	}
}

ActionBase = function () {
	/// <summary>Base class to implement action handler</summary>
}

ActionBase.prototype = {
	execute: function () {
		var selectedIds = impactGrid.grid.getSelectedItemIds("|").split("|");
		var id_array = selectedIds[0] ? selectedIds : [];

		for (i = 0; i < id_array.length; i++) {
			var selRowId = id_array[i],
			rowItem = impactGrid.GridRowUserData[selRowId];
			this.executeItem(rowItem, selRowId);
		}
	},

	executeItem: function (rowItem, affectedItem, selRowId) {
		//Execute action for Item
	},

	Validate: function (selRowId, selItem) {
		//validate item
		return true;
	},

	searchItem: function (itemTypeName, searchCallback, sourceItemTypeName, sourcePropertyName) {
		var param = { aras: top.aras, itemtypeName: itemTypeName, multiselect: false, sourceItemTypeName: sourceItemTypeName, sourcePropertyName: sourcePropertyName };
		param.callback = function (dlgRes) {
			if(!dlgRes) {
				return;
			} else if (dlgRes.itemID === "") {
				return "";
			} else if(!dlgRes.item) {
				top.aras.AlertError(top.aras.getResource("PLM", "impactmatrix.message.item_should_be_selected"));
				return;
			}
 
			var itemId = top.aras.getItemProperty(dlgRes.item, "id", "");
			var itemType = dlgRes.item.getAttribute('type');
			var requiredItem = top.aras.getItemById(itemType, itemId, 0);
			searchCallback(requiredItem);
		};
		top.aras.modalDialogHelper.show('SearchDialog', top, param);
	}
}
]]>
    </method_code>
    <method_type>JavaScript</method_type>
    <name>vo_Base Tree Grid</name>
  </Item>
</AML>
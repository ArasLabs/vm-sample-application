<AML>
 <Item type="Method" id="A3157A3F1B3048E2B7F9831061169970" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[BomResolutionForm = function() {
	this.Node = parent.dialogArguments.validationResult;
	this.aras = parent.aras;
	require(['Controls/Common/RenderUtils'], function(RenderUtils) {
		this.RenderUtils = RenderUtils;
	}.bind(this));
	this.Resolve();
};

BomResolutionForm.prototype.Resolve = function() {
	// delete old controls
	var gridBom = document.getElementById('gridBom');
	while (gridBom.firstChild) {
		gridBom.removeChild(gridBom.firstChild);
	}

	// load current user
	var currentUserId = aras.getUserID();
	var structureItem = this.Node;
	// display result
	if (structureItem) {
		if (structureItem.isError()) {
			aras.AlertError(structureItem);
			return;
		}

		var html = '';

		// GetBaseTamplate
		html = html + '<?xml version="1.0" encoding="utf-8"?>';
		html = html + '<table';
		html = html + ' font="Microsoft Sans Serif-8"';
		html = html + ' sel_bgColor="steelbue"';
		html = html + ' sel_TextColor="white"';
		html = html + ' header_BgColor="buttonface"';
		html = html + ' expandroot="true"';
		html = html + ' expandall="true"'; // was inverted
		html = html + ' treelines="1"';
		html = html + ' editable="false"';
		html = html + ' draw_grid="true"';
		html = html + ' multiselect="false"'; // was inverted
		html = html + ' column_draggable="true"';
		html = html + ' enableHtml="false"';
		html = html + ' enterAsTab="false"';
		html = html + ' bgInvert="true"';
		html = html + ' xmlns:msxsl="urn:schemas-microsoft-com:xslt"';
		html = html + ' xmlns:aras="http://www.aras.com"';
		html = html + ' xmlns:usr="urn:the-xml-files:xslt">';
		html = html + ' <thead>';
		html = html + '  <th align="c">Part Number</th>';
		html = html + '  <th align="c">Revision</th>';
		html = html + '  <th align="c">State</th>';
		html = html + '  <th align="c">Sequence</th>';
		html = html + '  <th align="c">Quantity</th>';
		html = html + '  <th align="c">Locked By</th>';
		html = html + '  <th align="c">Name</th>';
		html = html + '  <th align="c">Reference Designator</th>';
		html = html + ' </thead>';
		html = html + ' <columns>';
		html = html + '  <column width="220" edit="NOEDIT" align="l" order="0" />';
		html = html + '  <column width="40"  edit="NOEDIT" align="c" order="1" />';
		html = html + '  <column width="90"  edit="NOEDIT" align="c" order="2" />';
		html = html + '  <column width="70"  edit="NOEDIT" align="c" order="3" sort="numeric"/>';
		html = html + '  <column width="70"  edit="NOEDIT" align="c" order="4" sort="numeric"/>';
		html = html + '  <column width="40"  edit="NOEDIT" align="c" order="5" />';
		html = html + '  <column width="250" edit="NOEDIT" align="l" order="6" />';
		html = html + '  <column width="100" edit="NOEDIT" align="l" order="7" />';
		html = html + ' </columns>';
		html = html + ' <menu>';
		html = html + ' <emptytag/>';
		html = html + ' </menu>';

		// GetParsedData
		var displayPart = function(level, part, bom) {
			var lockedById = part.getProperty('locked_by_id');
			var lockedByImage = '';
			if (lockedById) {
				lockedByImage = (lockedById == currentUserId) ? '&lt;img src="../images/LockedByMe.svg" /&gt;' : '&lt;img src="../images/LockedByMe.svg" /&gt;';
			} else {
				lockedByImage = '<emptytag />';
			}

			html = html + '<tr level="';
			html = html + level;
			html = html + '" icon0="../images/Part.svg" icon1="../images/Part.svg"><userdata key="gridData_rowItemID" value="';
			html = html + part.getID();
			html = html + '" /><td>';
			html = html + part.getProperty('item_number', '');
			html = html + '</td><td>';
			html = html + part.getProperty('major_rev', '');
			html = html + '</td><td>';
			html = html + part.getProperty('state', '');
			html = html + '</td><td>';
			html = html + (bom ? bom.getProperty('sort_order', '') : '');
			html = html + '</td><td>';
			html = html + (bom ? bom.getProperty('quantity', '') : '');
			html = html + '</td><td>';
			html = html + lockedByImage;
			html = html + '</td><td>';
			html = html + part.getProperty('name', '');
			html = html + '</td><td>';
			html = html + (bom ? bom.getProperty('reference_designator', '') : '');
			html = html + '</td>';

			var boms = part.getRelationships('Part BOM');
			for (var j = 0; j < boms.getItemCount(); j++) {
				var bom = boms.getItemByIndex(j);
				displayPart(level + 1, bom.getPropertyItem('related_id'), bom);
			}

			html = html + '</tr>';
		};
		for (var i = 0; i < structureItem.getItemCount(); i++) {
			displayPart(0, structureItem.getItemByIndex(i), null);
		}

		html = html + '</table>';

		var self = this.aras;
		var onOpenRowItem = function(rowId) {
			if (!rowId) {
				rowId = grid.getSelectedId();
			}

			if (!rowId) {
				return;
			}

			var partId = grid.GetUserData(rowId, 'gridData_rowItemID');
			if (partId) {
				self.uiShowItem('Part', partId);
			}
		};

		var onGridDoubleClick = function(rowId) {
			onOpenRowItem(rowId);
		};

		var onGridMenuInit = function(row, col, p) {
			var menu = grid.getMenu();
			menu.removeAll();
			menu.add('open_row_item', 'Open Item');
			menu.menu.startup();
		};

		var onGridMenuClick = function(menuChoice, rowId, col) {
			if ('open_row_item' == menuChoice) {
				onOpenRowItem(rowId);
			}
		};

		var formatCellHtml = function(storeValue, rowIndex, level, layoutCell) {
			var htmlRenderUtils = this.RenderUtils.HTML;
			var cellHTML = htmlRenderUtils.wrapInTag(storeValue, 'span', {class: 'NameElementNamePart', title: storeValue});
			return htmlRenderUtils.wrapInTag(cellHTML, 'div', {class: 'CellTextContent', style: 'left:' + (level * 28 + 45) + 'px;right: 0px;'});
		};

		clientControlsFactory.createControl('Aras.Client.Controls.Public.TreeGridContainer',
			{
				aras: aras,
				connectId: 'gridBom',
				canEdit_Experimental: function() { return false; }
			},
			function(control) {
				grid = control;
				grid.setMultiselect(false);
				clientControlsFactory.on(grid, {
					'gridDoubleClick': onGridDoubleClick,
					'gridMenuInit': onGridMenuInit,
					'gridMenuClick': onGridMenuClick
				});
				grid.InitXML(html);
				grid.columns_Experimental.set(0, 'formatter', formatCellHtml.bind(this));
				grid.grid_Experimental.updateRow(0);
			}.bind(this)
		);
	} else {
		aras.AlertWarning('No valid combinations have been found for options string: ' + optionsString);
	}
};

BomResolutionForm = new BomResolutionForm();]]></method_code>
  <method_type>JavaScript</method_type>
  <name>cs_sample_onShowBomResolution</name>
 </Item>
</AML>
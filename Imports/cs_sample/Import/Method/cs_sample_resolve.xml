<AML>
 <Item type="Method" id="DDE1743DD6B648558B2932A35C535383" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//MethodTemplateName=CSharpInOut;
			Aras.Server.Core.IOMConnection tmpConnection = (Aras.Server.Core.IOMConnection)InnovatorServerASP;
			CCO = tmpConnection.CCO;
			inn = new Innovator(InnovatorServerASP);
			Item = inn.getItemInDom(inDom);

			DataReader dataReader = new DataReader(inn, Item);
			Resolver resolver = new Resolver(inn, Item);
			Item genericItemStructure = dataReader.GetGenericItemStructure();
			XmlNode conditionContent = Resolver.GetExpressionFromText(inn.newXMLDocument(), Item.getProperty("condition"));

			System.Collections.Generic.Dictionary<string, Item> resolvedGenericItemList = resolver.ResolveGenericItemList(dataReader.GetUsages(genericItemStructure), conditionContent == null ? string.Empty: conditionContent.InnerXml);

			BomBuilder bomBuilder = new BomBuilder(genericItemStructure, resolvedGenericItemList);
			Item Bom = bomBuilder.BuildBom();
			XmlDocument tmpDoc = new XmlDocument();
			tmpDoc.LoadXml(Bom.dom.OuterXml);
			XmlNode impNode = outDom.ImportNode(tmpDoc.DocumentElement, true);
			outDom.SelectSingleNode("//Result").AppendChild(impNode);
		}
		private Innovator inn { get; set; }
		private Item Item { get; set; }
		Aras.Server.Core.CallContext CCO { get; set; }
		internal class Resolver
		{
			internal Resolver(Innovator inn, Item item)
			{
				this.inn = inn;
				this.Item = item;
			}
			private Innovator inn { get; set; }
			private Item Item { get; set; }
			internal Item ResolveGenericItem(Item genericItem, string condition)
			{
				Item new_genericItem = inn.newItem("cs_sample_GenericItem");
				new_genericItem.setID(genericItem.getID());
				
				var targetScope = inn.newItem("Method", "cs_sample_ScopeBuilder");
				targetScope.setID(Item.getID());

				Item validationMethod = inn.newItem("Method", "cfg_GetValidCombinations");
				validationMethod.setAttribute("responseFormat", "XML");
				validationMethod.setAttribute("fetch", "1");
				validationMethod.setPropertyItem("targetScope", targetScope);

				Item usageItemList = genericItem.getRelationships("cs_sample_Usage");
				System.Collections.Generic.List<string> usageList = new System.Collections.Generic.List<string>();
				for (int i = 0; i < usageItemList.getItemCount(); i++)
				{
					Item usage = usageItemList.getItemByIndex(i);
					string definition = usage.getProperty("definition");
					XmlNode expressionNode = GetExpressionFromText(inn.newXMLDocument(), definition);

					string expressionContent = expressionNode != null ? expressionNode.InnerXml : string.Empty;
					if (!string.IsNullOrEmpty(expressionContent) || !string.IsNullOrEmpty(condition))
					{
						string usageString = string.Format("<and>{0}{1}</and>", expressionContent, condition);
						validationMethod.setProperty("condition", string.Format("<expression>{0}</expression>", usageString));
					}
					else
					{
						validationMethod.removeProperty("condition");
					}
					Item result = validationMethod.apply();
					XmlNodeList cortegeList = result.dom.SelectNodes("//combination");
					if (cortegeList.Count > 0)
					{
						Item part = usage.getRelatedItem();
						if (part != null)
							new_genericItem.addRelationship(part);
					}
				}
				return new_genericItem;
			}
			internal System.Collections.Generic.Dictionary<string, Item> ResolveGenericItemList(Item genericItem, string condition)
			{
				System.Collections.Generic.Dictionary<string, Item> genericItemList = new System.Collections.Generic.Dictionary<string, Item>();
				for (int i = 0; i < genericItem.getItemCount(); i++)
				{
					Item usage = genericItem.getItemByIndex(i);
					string genericItemId = usage.getID();
					genericItemList[genericItemId] = ResolveGenericItem(usage, condition);
				}
				return genericItemList;
			}
			internal static XmlNode GetExpressionFromText(XmlDocument xmlDoc, string text)
			{
				if (string.IsNullOrEmpty(text))
				{
					return null;
				}
				xmlDoc.PreserveWhitespace = false;
				xmlDoc.LoadXml(text);
				return xmlDoc.SelectSingleNode("expression");
			}
		}
		internal class BomBuilder
		{
			Innovator inn{ get; set; }
			Item GenericItemStructure { get; set; }
			System.Collections.Generic.Dictionary<string, Item> ResolvedGenericItemList { get; set; }
			internal BomBuilder(Item genericItemStructure, System.Collections.Generic.Dictionary<string, Item> resolvedGenericItemList)
			{
				GenericItemStructure = genericItemStructure;
				ResolvedGenericItemList = resolvedGenericItemList;
				inn = genericItemStructure.getInnovator();
			}
			internal Item BuildBom()
			{
				Item rootPart = inn.newItem();
				rootPart.loadAML("<Item type=\"Part\"/>");
				rootPart.setID(GenericItemStructure.getNewID());
				rootPart.setProperty("name", GenericItemStructure.getProperty("name"));
				rootPart.setProperty("item_number", GenerateItemNumber(GenericItemStructure));
				ResolveGenericItem(rootPart, GenericItemStructure);
				return rootPart;
			}
			private string GenerateItemNumber(Item item)
			{
			    return string.Format("Assembly ({0})", item.getProperty("name"));
			}
			private void ResolveGenericItem(Item part, Item genericItem)
			{
				bool isStructure = false;
				Item genericItemStructureList = genericItem.getRelationships("cs_sample_GenericItemStructure");
				for (int i = 0; i < genericItemStructureList.getItemCount(); i++)
				{
					isStructure = true;
					Item innerGenericItem = genericItemStructureList.getItemByIndex(i).getRelatedItem();

					Item genericItemPart = part.newItem("Part");
					genericItemPart.setID(innerGenericItem.getNewID());
					genericItemPart.setProperty("name", innerGenericItem.getProperty("name"));
					genericItemPart.setProperty("item_number", GenerateItemNumber(innerGenericItem));

					ResolveGenericItem(genericItemPart, innerGenericItem);

					Item bom = inn.newItem();
					bom.loadAML("<Item type=\"Part BOM\"/>");
					bom.setPropertyItem("related_id", genericItemPart);
					part.addRelationship(bom);
				}
				if (isStructure) return;
				Item genericItemWithParts = ResolvedGenericItemList[genericItem.getID()];
				Item partList = genericItemWithParts.getRelationships("Part");
				int partListCount = partList.getItemCount();
				if (partListCount == 0) return;
				for (int i = 0; i < partListCount; i++)
				{
					Item innerPart = partList.getItemByIndex(i);
					Item bom = inn.newItem();
					bom.loadAML("<Item type=\"Part BOM\"/>");
					bom.setPropertyItem("related_id", innerPart);
					part.addRelationship(bom);
				}
			}
		}
		internal class DataReader
		{
			internal DataReader(Innovator inn, Item item)
			{
				this.inn = inn;
				this.Item = item;
			}
			private Innovator inn { get; set; }
			private Item Item { get; set; }
			internal Item GetUsages(Item genericItemStructure)
			{
				System.Collections.Generic.IEnumerable<string> ids = GetGenericItemIdList(genericItemStructure);
				Item genericItemList = inn.newItem("cs_sample_GenericItem", "get");
				genericItemList.setAttribute("idlist", string.Join(",", ids));
				genericItemList.setAttribute("select", "name");

				Item usage = inn.newItem("cs_sample_Usage");
				usage.setAttribute("select", "definition, related_id");
				usage.setRelatedItem(inn.newItem("Part"));
				genericItemList.addRelationship(usage);
				return genericItemList.apply();
			}
			internal Item GetGenericItemStructure()
			{
				Item genericItemStructure = inn.newItem("cs_sample_GenericItemStructure");
				genericItemStructure.setAttribute("select", "name, related_id");
				genericItemStructure.setAttribute("repeatProp", "related_id");
				genericItemStructure.setAttribute("repeatTimes", "0");
				genericItemStructure.setPropertyItem("related_id", inn.newItem("cs_sample_GenericItem"));

				Item rootGenericItem = inn.newItem("cs_sample_GenericItem", "GetItemRepeatConfig");
				rootGenericItem.setID(Item.getID());
				rootGenericItem.setAttribute("select", "id,name");
				rootGenericItem.addRelationship(genericItemStructure);
				return rootGenericItem.apply();
			}
			internal System.Collections.Generic.IEnumerable<string> GetGenericItemIdList(Item genericItemStructure)
			{
				System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
				Item genericItemList = genericItemStructure.getItemsByXPath("//Item[@type='cs_sample_GenericItem']");
				for (var idx = 0; idx < genericItemList.getItemCount(); idx++)
				{
					Item loopGenericItem = genericItemList.getItemByIndex(idx);
					list.Add(loopGenericItem.getID());
				}
				return list;
			}]]></method_code>
  <method_type>C#</method_type>
  <name>cs_sample_resolve</name>
 </Item>
</AML>
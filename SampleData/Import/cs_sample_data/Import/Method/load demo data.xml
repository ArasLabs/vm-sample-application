<AML>
 <Item type="Method" id="56ACED043BB1476ABDE771200F52B814" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[    // method takes the package file path and loads the data files
    Innovator inn = this.getInnovator();
    string path = this.getProperty("path","");
    
    if (path == "")
        return inn.newError("Error in cs_sample_data_load: 'path' property must be passed in method call.");
    
    // remove trailing backslash if exists    
    if (path.LastIndexOf('\\') == path.Length-1)
        path = path.Substring(0,path.Length-1);
        
    path += @"\SampleData\Data";
    
    inn.applyMethod("cs_sample_data_delete","");
    
    // {filename,itemtype}
    Dictionary<string,string> loadItems = new Dictionary<string,string>();
    
    loadItems.Add("001-Part.txt", "Part");
    loadItems.Add("002-PartBOM.txt", "Part BOM");
    loadItems.Add("003-GenericItem.txt", "cs_sample_GenericItem");
    loadItems.Add("004-GenericItemStructure.txt", "cs_sample_GenericItemStructure");
    loadItems.Add("005-Family.txt", "cs_sample_Family");
    loadItems.Add("006-RelevantFamilies.txt", "cs_sample_RelevantFamilies");
    loadItems.Add("007-Option.txt", "cs_sample_Option");
    loadItems.Add("008-FamilyOption.txt", "cs_sample_FamilyOption");
    loadItems.Add("009-Usage.txt", "cs_sample_Usage");
    loadItems.Add("010-Rules.txt", "cs_sample_Rule");
    
    foreach (KeyValuePair<string,string> item in loadItems)
    {
        string filename = item.Key;
        string itemtype = item.Value;
    
        try
        {   // Open the text file using a stream reader.
            using (StreamReader sr = new StreamReader(path + @"\" + filename))
            {
                // Read the stream to a string, and write the string to the console.
                string content = sr.ReadToEnd();
                
                // parse data files, build AML, and load items
                Item res = createItems(inn, itemtype, content, path);
                
                if (res.isError())
                    return res;
            }
        }
        catch (Exception e)
        {
            string err = "Exception message: " + e.Message + "\n" + path + @"\" + filename;
            return inn.newError(err);
        }
    }
    
    return inn.newResult("Success!");
}

public static Item createItems(Innovator inn, string itemtype, string content, string path){
    
    // validate parameters
    if (itemtype == "" || content == "")
        return inn.newError("Error in createItems(): 'itemtype' and 'content' properties cannot be empty.");
        
    // build aml from input
    string aml = "<AML>\n";
    
    // first line in file contains properties
    string[] lines = content.Split('\n');
    string[] props = lines[0].Split('\t');
    
    for (int i = 1; i < lines.Length; i++)
    {
        string line = lines[i];
        
        if (line == "") continue; // line is blank
        
        string itemId = line.Split('\t')[0]; // assumes 'id' is always the first col
        string item = "<Item type='" + itemtype + "' action='add' id='" + itemId + "'>\n";
    
        int propIndex = 0;
        while (propIndex < props.Length)
        {
            int nextTab = line.IndexOf('\t');
            string prop = props[propIndex];
    
            if (nextTab == 0)
            {
                // we hit a null property value. skip this property.
                if (line.Length > 0)
                    line = line.Substring(1);
                propIndex++;
            }
            else if (nextTab < 0)
            {
                // end of line
                if (line.Length > 0 && !string.IsNullOrWhiteSpace(prop))
                {
                    item += "<" + prop + ">";
                    item += line;
                    item += "</" + prop + ">\n";
                }
                break;
            }
            else
            {
                // add property to aml
                string value = line.Substring(0, nextTab);
                item += "<" + prop + ">";
                item += value;
                item += "</" + prop + ">\n";
                
                // remove the property we just processed and the tab
                line = line.Substring(nextTab);
                if (line.Length > 0)
                    line = line.Substring(1);
                
                propIndex++;
            }
        }
    
        item += "</Item>\n";
        aml += item;
    }
    
    aml += "</AML>";
    
    // write log for debugging load issues
    logAML(path + @"\Logs\" + itemtype + ".xml", aml);
    
    Item res = inn.applyAML(aml);
    
    return res;
}

public static void logAML(string name, string aml){
    // print AML to file for debugging
    System.IO.FileInfo file = new System.IO.FileInfo(name);
    file.Directory.Create(); 
    System.IO.File.WriteAllText(file.FullName, aml);


    
    

]]></method_code>
  <method_type>C#</method_type>
  <name>cs_sample_data_load</name>
 </Item>
</AML>
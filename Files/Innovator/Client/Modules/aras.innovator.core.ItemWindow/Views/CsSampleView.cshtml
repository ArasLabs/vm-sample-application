@{
	Layout = "Shared/_tabItemViewLayout.cshtml";
	string formHeight = Request.QueryString["formHeight"] + "px";
}
@section extra_header
{
	<script type="text/javascript">
		var scopeItem = item;
		var synchronizer;
		var restoreTabAttributeName = 'restoreTab';
		var viewsController = {
			views: {},
			dataModel: null,
			activeViewer: null,
			isTabLoading: false,
			_viewSetupParameters: {},
			_currentUser: aras.getUserID(),
			_isRootItemAction: false,
			shareData: {},
			controls: {},
			_hiddenToolbarItems: [
				'refresh'
			],
			_originMethods: {
				lockCommand: onLockCommand,
				unlockCommand: onUnlockCommand,
				saveCommand: onSaveCommand,
				refreshCommand: onRefresh,
				setItem: setItem,
				updateMenuState: updateMenuState
			},

			onItemLinkClicked: function(typeName, additionalParameters) {
				var tabId;

				switch (typeName) {
					case 'cs_sample_Rule':
						tabId = 'textRuleEditorViewTab';
						break;
				}

				if (tabId) {
					if (this.activeTab == tabId) {
						this.setupViewer(additionalParameters);
					} else {
						var sidebarControl = viewsController.controls.sidebar || (viewsController.controls.sidebar = getSidebar());
						if (sidebarControl) {
							var tabSidebarButton = sidebarControl.getButtonWidgetById(tabId);

							if (tabSidebarButton) {
								this._viewSetupParameters[tabId] = additionalParameters;
								tabSidebarButton.onClick();
							}
						}
					}
				}
			},

			addViewer: function(viewerName, viewerControl) {
				if (viewerName && viewerControl) {
					this.views[viewerName] = viewerControl;
				}
			},

			getViewer: function(viewerName) {
				return this.views[viewerName];
			},

			loadViewer: function(viewerName, targetItem) {
				if (viewerName && viewerName !== this.activeViewer && viewerName !== 'formTab') {
					var targetViewer = this.views[viewerName];

					this.unloadViewer(this.activeViewer);

					if (targetViewer) {
						aras.browserHelper.toggleSpinner(document, true);

						if (targetViewer.isContentLoaded()) {
							this.activeViewer = viewerName;

							// setTimeout is required, because IE doesn't show spinner till loadViewer method will be finished
							setTimeout(function() {
									var viewerWindow = targetViewer.domNode.contentWindow || targetViewer.domNode.ownerDocument.defaultView;

									if (viewerWindow && viewerWindow.loadView) {
										viewerWindow.loadView(targetItem);
									}

									this.setupViewer(this._viewSetupParameters[viewerName]);
									delete this._viewSetupParameters[viewerName];

									aras.browserHelper.toggleSpinner(document, false);
								}.bind(this), 0);
						} else {
							var onLoadHandler = function() {
								this.isTabLoading = false;
								this.loadViewer(viewerName, targetItem);

								targetViewer.domNode.removeEventListener('load', onLoadHandler);
							}.bind(this);

							targetViewer.domNode.addEventListener('load', onLoadHandler);

							isTabLoading = true;
						}
					}
				} else {
					var hasUsagesRelatedItem = checkRelationshipExists('cs_sample_Usage');
					setRelationshipsGridDisabled(hasUsagesRelatedItem);
				}
			},

			setupViewer: function(setupParameters) {
				var targetViewer = this.activeViewer && this.views[this.activeViewer];

				if (targetViewer) {
					var viewerWindow = targetViewer.domNode.contentWindow || targetViewer.domNode.ownerDocument.defaultView;

					if (viewerWindow && viewerWindow.setupView) {
						viewerWindow.setupView(setupParameters);
					}
				}
			},

			reloadActiveViewer: function(newItem) {
				if (this.activeViewer) {
					var targetViewer = this.views[this.activeViewer];

					if (targetViewer) {
						var viewerWindow = targetViewer.domNode.contentWindow || targetViewer.domNode.ownerDocument.defaultView;

						if (viewerWindow && viewerWindow.reloadView) {
							viewerWindow.reloadView(newItem);
						}
					}
				}
			},

			unloadViewer: function(viewerName) {
				if (viewerName) {
					var targetViewer = this.views[viewerName];

					if (targetViewer) {
						var viewerWindow = targetViewer.domNode.contentWindow || targetViewer.domNode.ownerDocument.defaultView;

						if (viewerWindow && viewerWindow.unloadView) {
							viewerWindow.unloadView();
						}
					}

					this.activeViewer = null;
				}
			},

			isViewEditable: function() {
				return aras.isTempEx(scopeItem) || aras.getItemProperty(scopeItem, 'locked_by_id') === this._currentUser;
			}
		};

		setItem = function(newItemNode) {
			if (viewsController._isRootItemAction) {
				var originMethod = viewsController._originMethods.setItem;
				var shareData = viewsController.shareData;

				if (originMethod) {
					originMethod(newItemNode);
				}

				scopeItem = newItemNode;
				synchronizer.reloadControlsData(newItemNode);
				shareData.aggregatedDataModel.cleanupRequestCache();

				// update share data before view reloading
				synchronizer.setEditMode(viewsController.isViewEditable());
				viewsController.reloadActiveViewer(newItemNode);
				updateMenuState();
			}
		};

		checkRelationshipExists = function(relationshipName) {
			var xpath = './Relationships/Item[@@type="' + relationshipName + '"]';
			var relatedItem = scopeItem.selectNodes(xpath);
			if (relatedItem.length) {
				return true;
			}
			var scopeItemWithSavedRels = synchronizer.dataLoader.requestSampleRelationshipData([relationshipName], false);
			relatedItem = scopeItemWithSavedRels.selectNodes(xpath);
			return Boolean(relatedItem.length);
		};

		setTabAvailability = function(tabId) {
			var sidebar = viewsController.controls.sidebar;
			// button and tab id are the same, except default 'formTab' tab, where button id is 'show_form'
			var buttonId = tabId === 'formTab' ? 'show_form' : tabId;
			if (sidebar && viewsController.controls.tabViewContol.getCurrentTabId() !== tabId) {
				var selectedButton = sidebar.getButtonWidgetById(buttonId);
				var isTabAvailable = getTabAvailability(tabId);
				selectedButton.setDisabled(!isTabAvailable);
				selectedButton.domNode.style.opacity = isTabAvailable ? '1' : '0.4';
			}
		};

		getTabAvailability = function(tabId) {
			var isNewItem = scopeItem.getAttribute('action') === 'add';
			var isDirty = aras.isDirtyEx(scopeItem);
			var childGenericItemExists = checkRelationshipExists('cs_sample_GenericItemStructure');

			switch (tabId) {
				case 'formTab':
					return !isDirty;
				case 'relevantFamiliesViewTab':
				case 'tableRuleEditorViewTab':
				case 'textRuleEditorViewTab':
				case 'variantsTreeViewTab':
				case 'validationResolutionViewTab':
					return !isNewItem && !isDirty;
				case 'usagesViewTab':
					return !isNewItem && !isDirty && !childGenericItemExists;
				default:
					return true;
			}
		};

		refreshViewTabsAvailability = function() {
			for (var tabId in viewsController.controls.tabViewContol._tabs) {
				setTabAvailability(tabId);
			}

			var childUsageItemExists = checkRelationshipExists('cs_sample_Usage');
			setRelationshipsGridDisabled(childUsageItemExists);
		};

		setRelationshipsGridDisabled = function(disabled) {
			if (disabled) {
				windowStateObject.state = 'tabs off';
				windowStateObject.setHidden();
			} else {
				windowStateObject.state = 'tabs on';
			}
		}

		toggleRelationshipContentPane = function() {
			var relationshipsContainer = document.getElementById('relationshipContentPane');
			if (relationshipsContainer) {
				relationshipsContainer.style.display = windowStateObject.state !== 'tabs off' ? '' : 'none';
			}
		}

		updateToolbarButtons = function(toolbar) {
			var hiddenButtonIds = viewsController._hiddenToolbarItems;
			var visibleButtonIds = toolbar.getButtons(',').split(',').filter(function(buttonId) {
				return hiddenButtonIds.indexOf(buttonId) === -1;
			});
			var i;
			var length;

			for (i = 0, length = hiddenButtonIds.length; i < length; i++) {
				toolbar.hideItem(hiddenButtonIds[i]);
			}

			var isSeparator = function(itemId) {
				var toolbarItemData = toolbar._toolbar.data.get(itemId);
				return toolbarItemData && toolbarItemData.type === 'separator';
			}
			// remove redundant toolbar separators after toolbar items were deleted
			for (i = 0, length = visibleButtonIds.length; i < length - 1; i++) {
				if (isSeparator(visibleButtonIds[i]) && isSeparator(visibleButtonIds[i + 1])) {
					toolbar.hideItem(visibleButtonIds[i]);
				}
			}
		}

		updateMenuState = function() {
			clearTimeout(updateMenuState_tmt);

			menuFrame = (isTearOff ?
							(window.tearOffMenuController ? window.tearOffMenuController : null)
							: mainWnd.main.menu);

			if (!menuFrame || !menuFrame.menuFrameReady || !menuFrame.toolbarApplet) {
				updateMenuState_tmt = setTimeout(updateMenuState, 100);
			} else {
				var originMethod = viewsController._originMethods.updateMenuState;

				if (originMethod) {
					originMethod();
				}
			}
		};

		onLockCommand = function() {
			callRootItemCommand('lockCommand', arguments);
		};

		onUnlockCommand = function() {
			var saveBeforeUnlock = arguments.length > 0 ? arguments[0] : false;
			if (saveBeforeUnlock) {
				var validationErrors = synchronizer.validateItemsState(true);
				if (validationErrors.length > 0) {
					return aras.AlertError(validationErrors[0].message, '', '', {isHtml: validationErrors[0].isHtml});
				}
			}
			callRootItemCommand('unlockCommand', arguments);
		};

		onSaveCommand = function() {
			var validationErrors = synchronizer.validateItemsState(true);
			if (validationErrors.length > 0) {
				return aras.AlertError(validationErrors[0].message, '', '', {isHtml: validationErrors[0].isHtml});
			}
			callRootItemCommand('saveCommand', arguments);
		};

		onRefresh = function() {
			callRootItemCommand('refreshCommand', arguments);
		};

		function callRootItemCommand(commandName, commandArguments) {
			var commandHandler = viewsController._originMethods[commandName];
			var applyCommandResult;

			if (commandHandler) {
				viewsController._isRootItemAction = true;
				applyCommandResult = commandHandler.apply(this, commandArguments);

				if (applyCommandResult instanceof Promise) {
					applyCommandResult.then(function() {
						viewsController._isRootItemAction = false;
						refreshViewTabsAvailability();
					});
				} else {
					viewsController._isRootItemAction = false;
					refreshViewTabsAvailability();
				}
			}
		}


		function extendFunction(functionToExtend, func, fireBefore) {
			var oldFunction = functionToExtend;
			functionToExtend = function extendsInit() {
				if (fireBefore) {
					func.apply(this, arguments);
				}
				var result = oldFunction.apply(this, arguments);
				if (!fireBefore) {
					func.apply(this, arguments);
				}
				return result;
			};
			return functionToExtend;
		}

		windowStateObject.setHidden = extendFunction(windowStateObject.setHidden, toggleRelationshipContentPane.bind(this), true);

		windowStateObject.setVisible = extendFunction(windowStateObject.setVisible, toggleRelationshipContentPane.bind(this), true);

		window.addEventListener('load', function() {
			if (viewsController.isTabLoading) {
				aras.browserHelper.toggleSpinner(document, true);
			}
		});
		window.addEventListener('unload', function() {
			if (aras.isDirtyEx(scopeItem)) {
				scopeItem.setAttribute(restoreTabAttributeName, viewsController.activeViewer);
			} else {
				scopeItem.removeAttribute(restoreTabAttributeName);
			}
		});

		document.addEventListener('loadWidgets', onWidgetsLoadedHandler);
		document.addEventListener('loadSideBar', function() {
			require(['dojo/ready'], function(ready) {
				ready(function() {
					var sidebarControl = (viewsController.controls.sidebar = getSidebar());
					var startupTab = scopeItem.getAttribute(restoreTabAttributeName);
					if (startupTab) {
						var tabSidebarButton = sidebarControl.getButtonWidgetById(startupTab);

						if (tabSidebarButton) {
							tabSidebarButton.onClick();
						}
					}
					refreshViewTabsAvailability();
				});
			});
		});

		function onWidgetsLoadedHandler() {
			require([
				'dojo/_base/connect',
				'Configurator/Scripts/ScopeRules/DataLoader',
				'Configurator/Scripts/ScopeRules/Synchronizer',
				'Configurator/Scripts/Common/ItemFormViewHelper',
				'Configurator/Scripts/TableRuleEditor/DataModel/ScopeDataModel',
				'Configurator/Scripts/TableRuleEditor/DataModel/AggregatedDataModel'
			], function(connect, DataLoader, Synchronizer, ItemFormViewHelper, ScopeDataModel, AggregatedDataModel) {
				var dataLoader = new DataLoader({aras: aras, scopeItem: scopeItem});
				var tabViewContol = window.getViewersTabs();
				var shareData = viewsController.shareData;
				var scopeDataModel = new ScopeDataModel({aras: aras, scopeItem: scopeItem});
				var aggregatedDataModel = new AggregatedDataModel({aras: aras});
				var tabId;

				synchronizer = new Synchronizer({
					aras: aras,
					scopeItem: scopeItem,
					dataLoader: dataLoader,
					isEditMode: isEditMode
				});

				for (tabId in tabViewContol._tabs) {
					viewsController.addViewer(tabId, tabViewContol.getTabById(tabId).getChildren()[0]);
				}

				// register events
				connect.connect(tabViewContol, 'onPreSelectTab', onPreSelectTabHandler);
				connect.connect(tabViewContol, 'onSelectTab', onSelectTabHandler);
				connect.connect(synchronizer, 'setScopeDirtyState', refreshViewTabsAvailability);
				var relationshipsGrid = relationships.iframesCollection[relationships.currTabID].contentWindow.relationshipsGrid;
				connect.connect(relationshipsGrid, 'updateControls', refreshViewTabsAvailability);

				// at this point, iframes from UrlViewers allready attached to document and shortcuts can be blocked
				returnBlockerHelper.blockInChildFrames(window, true);

				viewsController.controls.tabViewContol = tabViewContol;

				shareData.synchronizer = synchronizer;
				shareData.formViewHelper = new ItemFormViewHelper({aras: aras});
				shareData.scopeDataModel = scopeDataModel;
				shareData.aggregatedDataModel = aggregatedDataModel;

				tearOffMenuController.when('ToolbarInitialized').then(function() {
					updateToolbarButtons(menuFrame.toolbar);
				})
			});
		}

		onPreSelectTabHandler = function(sender, eventArguments) {
			if (viewsController.isTabLoading) {
				return true;
			}

			viewsController.unloadViewer(viewsController.activeViewer);
		};

		onSelectTabHandler = function(sender, eventArguments) {
			var sidebarWidget = getSidebar();
			if (sidebarWidget) {
				sidebarWidget.switchSidebarButton('button_relevantFamiliesViewTab', '../images/CFGScopeOff.svg', false);
				sidebarWidget.switchSidebarButton('button_tableRuleEditorViewTab', '../images/MethodOff.svg', false);
				sidebarWidget.switchSidebarButton('button_textRuleEditorViewTab', '../images/EditItemOff.svg', false);
				sidebarWidget.switchSidebarButton('button_variantsTreeViewTab', '../images/CFGRuleOff.svg', false);
				sidebarWidget.switchSidebarButton('button_usagesViewTab', '../Images/AffectedItemOff.svg', false);
				sidebarWidget.switchSidebarButton('button_validationResolutionViewTab', '../Images/CheckmarkOff.svg', false);
			}
			viewsController.loadViewer(eventArguments.id, scopeItem);
		};
	</script>
}
@section instance {
	<div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'top', splitter: true" baseClass="dijitContentPaneNoPadding" id="formContentPane" style="@Html.Raw("height:" + formHeight);">
		<div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, liveSplitters:false" style="position:relative; height: 100%;" id="formLayoutContainer">
			<div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region: 'center'" baseClass="dijitContentPaneNoPadding" style="height: 100%;" id="placeHolderContentPane">
				<div data-dojo-type="Controls/SimpleTabContainer" style="height: 100%;" id="viewers">
					<div data-dojo-type="Controls/Tab" data-dojo-props="selected:true" id="formTab">
						<div data-dojo-type="Aras/Client/Controls/Experimental/FormInstance" data-dojo-props="aras: aras, isNew: isNew, item: item, isEditMode: isEditMode, formHeight: formHeight, formWidth: formWidth" baseClass="dijitContentPaneNoPadding" id="form" style="height:100%; width:100%;"></div>
					</div>
					<div data-dojo-type="Controls/Tab" id="relevantFamiliesViewTab">
						<div data-dojo-type="Configurator/Views/Viewers/UrlViewer" data-dojo-props="targetUrl:'@Url.ContentWithSalt("~/Modules/aras.innovator.Configurator/RelevantFamiliesViewTab")'" baseClass="dijitContentPaneNoPadding" id="relevantFamiliesViewer" style="height:100%; width:100%;"></div>
					</div>
					<div data-dojo-type="Controls/Tab" id="tableRuleEditorViewTab">
						<div data-dojo-type="Configurator/Views/Viewers/UrlViewer" data-dojo-props="targetUrl:'@Url.ContentWithSalt("~/Modules/aras.innovator.Configurator/TableRuleEditorViewTab")'" baseClass="dijitContentPaneNoPadding" id="tableRuleEditorViewer" style="height:100%; width:100%;"></div>
					</div>
					<div data-dojo-type="Controls/Tab" id="textRuleEditorViewTab">
						<div data-dojo-type="Configurator/Views/Viewers/UrlViewer" data-dojo-props="targetUrl:'@Url.ContentWithSalt("~/Modules/aras.innovator.Configurator/TextRuleEditorViewTab")'" baseClass="dijitContentPaneNoPadding" id="textRuleEditorViewer" style="height:100%; width:100%;"></div>
					</div>
					<div data-dojo-type="Controls/Tab" id="variantsTreeViewTab">
						<div data-dojo-type="Configurator/Views/Viewers/UrlViewer" data-dojo-props="targetUrl:'@Url.ContentWithSalt("~/Modules/aras.innovator.Configurator/VariantsTreeViewTab")'" baseClass="dijitContentPaneNoPadding" id="variantsTreeViewer" style="height:100%; width:100%;"></div>
					</div>
					<div data-dojo-type="Controls/Tab" id="usagesViewTab">
						<div data-dojo-type="Configurator/Views/Viewers/UrlViewer" data-dojo-props="targetUrl:'@Url.ContentWithSalt("~/Modules/aras.innovator.Configurator/UsagesViewTab")'" baseClass="dijitContentPaneNoPadding" id="usagesViewer" style="height:100%; width:100%;"></div>
					</div>
					<div data-dojo-type="Controls/Tab" id="validationResolutionViewTab">
						<div data-dojo-type="Configurator/Views/Viewers/UrlViewer" data-dojo-props="targetUrl:'@Url.ContentWithSalt("~/Modules/aras.innovator.Configurator/ValidationResolutionViewTab")'" baseClass="dijitContentPaneNoPadding" id="validationResolutionViewer" style="height:100%; width:100%;"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
